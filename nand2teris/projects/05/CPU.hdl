// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	/*A Register*/
	Mux16(a = instruction, b = ALUout, sel = instruction[15], out = Ain);
	ARegister(in = Ain, load = Aload, out = Aout);
	Aloader(a = instruction[15], b = instruction[5], out = Aload);
		
	/*D Register*/
	DRegister(in = ALUout, load = CDload, out = Dout);

	/*M entry selection*/
	Mux16(a = Aout, b = inM, sel = instruction[12], out = MAout);

	/*ALU*/
	/*Cable16(in[0..5] = instruction[6..11], out = aluinstruction);*/
	ALU(x = Dout, y = MAout, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], zr = zr, ng = ng, out = ALUout);

	/*PC*/
	PC(in = Aout, load = PCload, inc = inc, reset = reset, out[0..14] = pc);
	JumpLogic(jmp = instruction[0..2], zr = zr, ng = ng, instrMode = instruction[15], load = PCload, inc = inc);	

	/*Output conections*/
	Cable16(in = ALUout, out = outM);
	Cable16(in = Aout, out[0..14] = addressM);
	Cable(in = CMload, out = writeM);


	/*Controll logic*/
	And(a = instruction[15], b = instruction[3], out = CMload);
	And(a = instruction[15], b = instruction[4], out = CDload);
	/*And(a = instrcution[15], b = instruction[3], out = CAjump); in the Aloader*/
}
